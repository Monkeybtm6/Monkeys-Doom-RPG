#library "PlayerScr"
#include "zcommon.acs"
#define PLAYER_TID_START 1000

#define atkbase 0.02
#define AGIbase 0.15
#define DAMAGE_COUNTPERCENT 0.008
#define MaxLevel 60
int LevelNext[MaxLevel];
int Playerloaded;
str StatArray[5] =
{
"StatVIT",
"StatATK",
"StatINT",
"StatSTR",
"StatAGI"
};
str StatProgArray[5] =
{
"StatProgressVIT",
"StatProgressATK",
"StatProgressINT",
"StatProgressSTR",
"StatProgressAGI"
};

script 90 ENTER
{
  int inMenu = true;
  int input;
  
  Thing_ChangeTID(0,PLAYER_TID_START+PlayerNumber());
  if (CheckInventory("HasLoaded") < 1 && getcvar("MRPG_UseDB")==true)
	{
	 SetHudSize (640, 400, TRUE);
	 ACS_NamedExecuteAlways("LoadCharScr",0);
	 SetPlayerProperty(0, true, PROP_TOTALLYFROZEN);
     Hudmessage(s:"Welcome! Press use to load character, Reload to create new.";HUDMSG_PLAIN,2,CR_Red, 340.0, 200.0,0,1);
	 While(inmenu) 
	  { 
	  input = GetPlayerInput(-1, INPUT_BUTTONS);
	  
	  if(input & BT_USE)
	    {
		print(s:"Character Restored.");
		inmenu = false;
		}
		
	  else if(input & BT_RELOAD)
	    {
		ACS_NamedExecuteAlways("WipeCharScr",0);
		inmenu = false;
		}
	   Delay(1);
	  }
	  SetPlayerProperty(0, false, PROP_TOTALLYFROZEN);
	  GiveInventory("HasLoaded",1);
	  Hudmessage(s:"";HUDMSG_PLAIN,2,CR_Red, 1.5, 0.8,1,1);
	}
 if(CheckInventory("Playerlevel") <= 0)
  {
    GiveInventory("Playerlevel",1);
	GiveInventory("StatVIT",4);
	GiveInventory("StatATK",4);
    GiveInventory("StatINT",4);
    GiveInventory("StatSTR",4);
    GiveInventory("StatAGI",4);
	GiveInventory("PistolWS",1);
    GiveInventory("Wepslot1",1);
  }
 if(getcvar("MRPG_Saveweapons")==False && CheckInventory("PistolWS") <= 0)
  {
    GiveInventory("PistolWS",1);
    GiveInventory("Wepslot1",1);
  }
  delay(1);
  Playerloaded =+ 1;
  ACS_NamedExecuteAlways("Manaregen",0);
  ACS_NamedExecuteAlways("UpdateStats",0);
}

script 91 RESPAWN
{
  Thing_ChangeTID(PLAYER_TID_START+PlayerNumber(),0);
  Thing_ChangeTID(0,PLAYER_TID_START+PlayerNumber());
  delay(1);
  ACS_NamedExecuteAlways("UpdateStats",0);
}

Script "Levelupcheck" (int EXPA)
{
  SetActivatorToTarget(0);
  if(ClassifyActor(0) & ACTOR_MONSTER)
  { 
  Terminate; 
  }

GiveInventory("Expereince", EXPA);

Int StatMult =
CheckInventory("StatVIT") +
CheckInventory("StatATK") +
CheckInventory("StatINT") +
CheckInventory("StatSTR") +
CheckInventory("StatAGI"),
 EXP = CheckInventory("Expereince"),
 Lvl = CheckInventory("Playerlevel"),
 EXPMULT = GetCvar("MRPG_EXPMULT"),
 STATEXPMULT = GetCvar("MRPG_STATMULT");
   
   
for(int sid = 0; sid <= 5; sid++)
  {
   if(CheckInventory(StatProgArray[sid]) >= (STATEXPMULT * StatMult) && StatMult <= 56)
   {
      GiveInventory(StatArray[sid], 1);
      TakeInventory(StatProgArray[sid],(STATEXPMULT * StatMult));
      Log(s:"Stat Increased for ",f:PlayerNumber());
   }
  }
   
   if(EXP >= (EXPMULT * Lvl) && LVL <= Maxlevel)
   {
      GiveInventory("Playerlevel", 1);
      TakeInventory("Expereince",(EXPMULT * lvl));
      ACS_NamedExecuteAlways("UpdateStats",0);
   }
}

Script "UpdateStats" (void)
{
  if(!(ClassifyActor(0) & ACTOR_PLAYER))
  { 
  Terminate; 
  }
  
  int StartHealth = CheckInventory("StatVIT") * 20,
  Player_Max_Health_in = CheckInventory("StatVIT") * CheckInventory("PlayerLevel"),
  Player_Max_Health_Out = (((PLAYER_MAX_HEALTH_in * 0.6) >> 16) + StartHealth),
  MyInt = CheckInventory("StatINT") * CheckInventory("PlayerLevel"),
  ManaStart = CheckInventory("StatINT") * 10,
  ManaAdd = (MyInt * 1);
  
  SetActorProperty(PLAYER_TID_START+PlayerNumber(), APROP_SPAWNHEALTH, Player_Max_Health_Out);
  if (getactorproperty(PLAYER_TID_START+PlayerNumber(), APROP_HEALTH) <= Player_Max_Health_Out)
     {
	 SetActorProperty(PLAYER_TID_START+PlayerNumber(), APROP_HEALTH, Player_Max_Health_out);
     }
	
ACS_NamedExecuteAlways("SetAmmoCap",0);
  
  SetActorProperty(PLAYER_TID_START+PlayerNumber(), APROP_Speed, (AGIBase * CheckInventory("StatAGI")) );
  SetAmmoCapacity("Mana", ManaStart + ManaAdd);
  
  Log(s:"Stats Refreshed for Player ",f:PlayerNumber());

}

Script "SetAmmoCap" (void)
{
  if( CheckInventory("Backpack") == 1)
    {
       SetAmmoCapacity("Clip", 150 * CheckInventory("StatSTR"));
       SetAmmoCapacity("RifleAmmo", 100 * CheckInventory("StatSTR"));
	   SetAmmoCapacity("Shell", 25 * CheckInventory("StatSTR"));
       SetAmmoCapacity("RocketAmmo", 25 * CheckInventory("StatSTR"));
       SetAmmoCapacity("Cell", 150 * CheckInventory("StatSTR"));
    }
  else
    {
       SetAmmoCapacity("Clip", 75 * CheckInventory("StatSTR"));
       SetAmmoCapacity("RifleAmmo", 50 * CheckInventory("StatSTR"));
	   SetAmmoCapacity("Shell", 12 * CheckInventory("StatSTR"));
       SetAmmoCapacity("RocketAmmo", 12 * CheckInventory("StatSTR"));
       SetAmmoCapacity("Cell", 75 * CheckInventory("StatSTR"));
	}
}

Script "ManaRegen" (void)
{
Giveinventory("Mana",1);
Delay(30 - CheckInventory("StatINT"));
Restart;
}

script "DAMAGESCR" (int indamage)
{
	int levelchecker = CheckInventory("StatATK") * CheckInventory("Playerlevel");
	int counter = DAMAGE_COUNTPERCENT * levelchecker;
    int outdamage = indamage * (1.0 + counter);
	setresultvalue(outdamage >> 16);
	//print(f: outdamage);
	
}

script "PROJDAMAGESCR" (int indamage)
{
	SetActivatorToTarget(0);
	int atkchecker = CheckInventory("StatATK");
	int levelchecker = atkchecker * CheckInventory("Playerlevel");
	int counter = DAMAGE_COUNTPERCENT * levelchecker;
    int outdamage = indamage * (1.0 + counter);
	setresultvalue(outdamage >> 16);
	//print(f: outdamage);
	
}

script "MAGJDAMAGESCR" (int indamage, int Isproj)
{
	if(Isproj == 1)
	{ SetActivatorToTarget(0); }
	
	int atkchecker = CheckInventory("StatINT");
	int levelchecker = atkchecker * CheckInventory("Playerlevel");
	int counter = DAMAGE_COUNTPERCENT * levelchecker;
    int outdamage = indamage * (1.0 + counter);
	setresultvalue(outdamage >> 16);
	//print(f: outdamage);
	
}

script "WeaponDrop" (void)
{
	str Currentwep = Checkweapon("");
	
	Takeinventory(Currentwep,1);
	
}

script "LevelendGrowth" UNLOADING
{
int StrengthGrowth = getlevelinfo(LEVELINFO_TOTAL_ITEMS),
ExpKillbonus = getlevelinfo(LEVELINFO_KILLED_MONSTERS),
ExpSecretBonus = getlevelinfo(LEVELINFO_FOUND_SECRETS);

for (int i = 0; i < playercount(); i++) 
    {
     GiveActorInventory(PLAYER_TID_START + i,"StatProgressSTR",StrengthGrowth * 3);
	 GiveActorInventory(PLAYER_TID_START + i,"StatProgressINT",EXPSecretBonus * 5);
	 GiveActorInventory(PLAYER_TID_START + i,"Expereince",EXPKillBonus);
	 GiveActorInventory(PLAYER_TID_START + i,"Expereince",EXPSecretBonus * 10);
	}
}